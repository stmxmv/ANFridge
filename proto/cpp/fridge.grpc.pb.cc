// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fridge.proto

#include "fridge.pb.h"
#include "fridge.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace AN {

static const char* ObjectDetector_method_names[] = {
  "/AN.ObjectDetector/DetectImage",
};

std::unique_ptr< ObjectDetector::Stub> ObjectDetector::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ObjectDetector::Stub> stub(new ObjectDetector::Stub(channel, options));
  return stub;
}

ObjectDetector::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_DetectImage_(ObjectDetector_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::ClientWriter< ::AN::ImageChunk>* ObjectDetector::Stub::DetectImageRaw(::grpc::ClientContext* context, ::AN::DetectResult* response) {
  return ::grpc::internal::ClientWriterFactory< ::AN::ImageChunk>::Create(channel_.get(), rpcmethod_DetectImage_, context, response);
}

void ObjectDetector::Stub::async::DetectImage(::grpc::ClientContext* context, ::AN::DetectResult* response, ::grpc::ClientWriteReactor< ::AN::ImageChunk>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::AN::ImageChunk>::Create(stub_->channel_.get(), stub_->rpcmethod_DetectImage_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::AN::ImageChunk>* ObjectDetector::Stub::AsyncDetectImageRaw(::grpc::ClientContext* context, ::AN::DetectResult* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::AN::ImageChunk>::Create(channel_.get(), cq, rpcmethod_DetectImage_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::AN::ImageChunk>* ObjectDetector::Stub::PrepareAsyncDetectImageRaw(::grpc::ClientContext* context, ::AN::DetectResult* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::AN::ImageChunk>::Create(channel_.get(), cq, rpcmethod_DetectImage_, context, response, false, nullptr);
}

ObjectDetector::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ObjectDetector_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< ObjectDetector::Service, ::AN::ImageChunk, ::AN::DetectResult>(
          [](ObjectDetector::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::AN::ImageChunk>* reader,
             ::AN::DetectResult* resp) {
               return service->DetectImage(ctx, reader, resp);
             }, this)));
}

ObjectDetector::Service::~Service() {
}

::grpc::Status ObjectDetector::Service::DetectImage(::grpc::ServerContext* context, ::grpc::ServerReader< ::AN::ImageChunk>* reader, ::AN::DetectResult* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace AN

