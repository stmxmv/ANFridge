// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fridge.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fridge_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fridge_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fridge_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fridge_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fridge_2eproto;
namespace AN {
class DetectResult;
struct DetectResultDefaultTypeInternal;
extern DetectResultDefaultTypeInternal _DetectResult_default_instance_;
class Detection;
struct DetectionDefaultTypeInternal;
extern DetectionDefaultTypeInternal _Detection_default_instance_;
class ImageChunk;
struct ImageChunkDefaultTypeInternal;
extern ImageChunkDefaultTypeInternal _ImageChunk_default_instance_;
}  // namespace AN
PROTOBUF_NAMESPACE_OPEN
template<> ::AN::DetectResult* Arena::CreateMaybeMessage<::AN::DetectResult>(Arena*);
template<> ::AN::Detection* Arena::CreateMaybeMessage<::AN::Detection>(Arena*);
template<> ::AN::ImageChunk* Arena::CreateMaybeMessage<::AN::ImageChunk>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AN {

// ===================================================================

class ImageChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AN.ImageChunk) */ {
 public:
  inline ImageChunk() : ImageChunk(nullptr) {}
  ~ImageChunk() override;
  explicit PROTOBUF_CONSTEXPR ImageChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageChunk(const ImageChunk& from);
  ImageChunk(ImageChunk&& from) noexcept
    : ImageChunk() {
    *this = ::std::move(from);
  }

  inline ImageChunk& operator=(const ImageChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageChunk& operator=(ImageChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImageChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageChunk* internal_default_instance() {
    return reinterpret_cast<const ImageChunk*>(
               &_ImageChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ImageChunk& a, ImageChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(ImageChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImageChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImageChunk& from) {
    ImageChunk::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImageChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AN.ImageChunk";
  }
  protected:
  explicit ImageChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 1,
  };
  // bytes buffer = 1;
  void clear_buffer();
  const std::string& buffer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buffer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buffer();
  PROTOBUF_NODISCARD std::string* release_buffer();
  void set_allocated_buffer(std::string* buffer);
  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(const std::string& value);
  std::string* _internal_mutable_buffer();
  public:

  // @@protoc_insertion_point(class_scope:AN.ImageChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fridge_2eproto;
};
// -------------------------------------------------------------------

class DetectResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AN.DetectResult) */ {
 public:
  inline DetectResult() : DetectResult(nullptr) {}
  ~DetectResult() override;
  explicit PROTOBUF_CONSTEXPR DetectResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectResult(const DetectResult& from);
  DetectResult(DetectResult&& from) noexcept
    : DetectResult() {
    *this = ::std::move(from);
  }

  inline DetectResult& operator=(const DetectResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectResult& operator=(DetectResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DetectResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectResult* internal_default_instance() {
    return reinterpret_cast<const DetectResult*>(
               &_DetectResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DetectResult& a, DetectResult& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DetectResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DetectResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DetectResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DetectResult& from) {
    DetectResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AN.DetectResult";
  }
  protected:
  explicit DetectResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetectionFieldNumber = 1,
  };
  // repeated .AN.Detection detection = 1;
  int detection_size() const;
  private:
  int _internal_detection_size() const;
  public:
  void clear_detection();
  ::AN::Detection* mutable_detection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AN::Detection >*
      mutable_detection();
  private:
  const ::AN::Detection& _internal_detection(int index) const;
  ::AN::Detection* _internal_add_detection();
  public:
  const ::AN::Detection& detection(int index) const;
  ::AN::Detection* add_detection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AN::Detection >&
      detection() const;

  // @@protoc_insertion_point(class_scope:AN.DetectResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AN::Detection > detection_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fridge_2eproto;
};
// -------------------------------------------------------------------

class Detection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AN.Detection) */ {
 public:
  inline Detection() : Detection(nullptr) {}
  ~Detection() override;
  explicit PROTOBUF_CONSTEXPR Detection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Detection(const Detection& from);
  Detection(Detection&& from) noexcept
    : Detection() {
    *this = ::std::move(from);
  }

  inline Detection& operator=(const Detection& from) {
    CopyFrom(from);
    return *this;
  }
  inline Detection& operator=(Detection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Detection& default_instance() {
    return *internal_default_instance();
  }
  static inline const Detection* internal_default_instance() {
    return reinterpret_cast<const Detection*>(
               &_Detection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Detection& a, Detection& b) {
    a.Swap(&b);
  }
  inline void Swap(Detection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Detection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Detection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Detection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Detection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Detection& from) {
    Detection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Detection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AN.Detection";
  }
  protected:
  explicit Detection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kX1FieldNumber = 1,
    kY1FieldNumber = 2,
    kX2FieldNumber = 3,
    kY2FieldNumber = 4,
    kConfidenceFieldNumber = 5,
    kIdFieldNumber = 6,
  };
  // float x1 = 1;
  void clear_x1();
  float x1() const;
  void set_x1(float value);
  private:
  float _internal_x1() const;
  void _internal_set_x1(float value);
  public:

  // float y1 = 2;
  void clear_y1();
  float y1() const;
  void set_y1(float value);
  private:
  float _internal_y1() const;
  void _internal_set_y1(float value);
  public:

  // float x2 = 3;
  void clear_x2();
  float x2() const;
  void set_x2(float value);
  private:
  float _internal_x2() const;
  void _internal_set_x2(float value);
  public:

  // float y2 = 4;
  void clear_y2();
  float y2() const;
  void set_y2(float value);
  private:
  float _internal_y2() const;
  void _internal_set_y2(float value);
  public:

  // float confidence = 5;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // int32 id = 6;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:AN.Detection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x1_;
    float y1_;
    float x2_;
    float y2_;
    float confidence_;
    int32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_fridge_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ImageChunk

// bytes buffer = 1;
inline void ImageChunk::clear_buffer() {
  _impl_.buffer_.ClearToEmpty();
}
inline const std::string& ImageChunk::buffer() const {
  // @@protoc_insertion_point(field_get:AN.ImageChunk.buffer)
  return _internal_buffer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ImageChunk::set_buffer(ArgT0&& arg0, ArgT... args) {
 
 _impl_.buffer_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:AN.ImageChunk.buffer)
}
inline std::string* ImageChunk::mutable_buffer() {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:AN.ImageChunk.buffer)
  return _s;
}
inline const std::string& ImageChunk::_internal_buffer() const {
  return _impl_.buffer_.Get();
}
inline void ImageChunk::_internal_set_buffer(const std::string& value) {
  
  _impl_.buffer_.Set(value, GetArenaForAllocation());
}
inline std::string* ImageChunk::_internal_mutable_buffer() {
  
  return _impl_.buffer_.Mutable(GetArenaForAllocation());
}
inline std::string* ImageChunk::release_buffer() {
  // @@protoc_insertion_point(field_release:AN.ImageChunk.buffer)
  return _impl_.buffer_.Release();
}
inline void ImageChunk::set_allocated_buffer(std::string* buffer) {
  if (buffer != nullptr) {
    
  } else {
    
  }
  _impl_.buffer_.SetAllocated(buffer, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.buffer_.IsDefault()) {
    _impl_.buffer_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:AN.ImageChunk.buffer)
}

// -------------------------------------------------------------------

// DetectResult

// repeated .AN.Detection detection = 1;
inline int DetectResult::_internal_detection_size() const {
  return _impl_.detection_.size();
}
inline int DetectResult::detection_size() const {
  return _internal_detection_size();
}
inline void DetectResult::clear_detection() {
  _impl_.detection_.Clear();
}
inline ::AN::Detection* DetectResult::mutable_detection(int index) {
  // @@protoc_insertion_point(field_mutable:AN.DetectResult.detection)
  return _impl_.detection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AN::Detection >*
DetectResult::mutable_detection() {
  // @@protoc_insertion_point(field_mutable_list:AN.DetectResult.detection)
  return &_impl_.detection_;
}
inline const ::AN::Detection& DetectResult::_internal_detection(int index) const {
  return _impl_.detection_.Get(index);
}
inline const ::AN::Detection& DetectResult::detection(int index) const {
  // @@protoc_insertion_point(field_get:AN.DetectResult.detection)
  return _internal_detection(index);
}
inline ::AN::Detection* DetectResult::_internal_add_detection() {
  return _impl_.detection_.Add();
}
inline ::AN::Detection* DetectResult::add_detection() {
  ::AN::Detection* _add = _internal_add_detection();
  // @@protoc_insertion_point(field_add:AN.DetectResult.detection)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AN::Detection >&
DetectResult::detection() const {
  // @@protoc_insertion_point(field_list:AN.DetectResult.detection)
  return _impl_.detection_;
}

// -------------------------------------------------------------------

// Detection

// float x1 = 1;
inline void Detection::clear_x1() {
  _impl_.x1_ = 0;
}
inline float Detection::_internal_x1() const {
  return _impl_.x1_;
}
inline float Detection::x1() const {
  // @@protoc_insertion_point(field_get:AN.Detection.x1)
  return _internal_x1();
}
inline void Detection::_internal_set_x1(float value) {
  
  _impl_.x1_ = value;
}
inline void Detection::set_x1(float value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:AN.Detection.x1)
}

// float y1 = 2;
inline void Detection::clear_y1() {
  _impl_.y1_ = 0;
}
inline float Detection::_internal_y1() const {
  return _impl_.y1_;
}
inline float Detection::y1() const {
  // @@protoc_insertion_point(field_get:AN.Detection.y1)
  return _internal_y1();
}
inline void Detection::_internal_set_y1(float value) {
  
  _impl_.y1_ = value;
}
inline void Detection::set_y1(float value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:AN.Detection.y1)
}

// float x2 = 3;
inline void Detection::clear_x2() {
  _impl_.x2_ = 0;
}
inline float Detection::_internal_x2() const {
  return _impl_.x2_;
}
inline float Detection::x2() const {
  // @@protoc_insertion_point(field_get:AN.Detection.x2)
  return _internal_x2();
}
inline void Detection::_internal_set_x2(float value) {
  
  _impl_.x2_ = value;
}
inline void Detection::set_x2(float value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:AN.Detection.x2)
}

// float y2 = 4;
inline void Detection::clear_y2() {
  _impl_.y2_ = 0;
}
inline float Detection::_internal_y2() const {
  return _impl_.y2_;
}
inline float Detection::y2() const {
  // @@protoc_insertion_point(field_get:AN.Detection.y2)
  return _internal_y2();
}
inline void Detection::_internal_set_y2(float value) {
  
  _impl_.y2_ = value;
}
inline void Detection::set_y2(float value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:AN.Detection.y2)
}

// float confidence = 5;
inline void Detection::clear_confidence() {
  _impl_.confidence_ = 0;
}
inline float Detection::_internal_confidence() const {
  return _impl_.confidence_;
}
inline float Detection::confidence() const {
  // @@protoc_insertion_point(field_get:AN.Detection.confidence)
  return _internal_confidence();
}
inline void Detection::_internal_set_confidence(float value) {
  
  _impl_.confidence_ = value;
}
inline void Detection::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:AN.Detection.confidence)
}

// int32 id = 6;
inline void Detection::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t Detection::_internal_id() const {
  return _impl_.id_;
}
inline int32_t Detection::id() const {
  // @@protoc_insertion_point(field_get:AN.Detection.id)
  return _internal_id();
}
inline void Detection::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void Detection::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:AN.Detection.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AN

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fridge_2eproto
